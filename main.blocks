<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Qay{[Xd3;*B$dPi$m}pV" x="22" y="43"><statement name="HANDLER"><block type="typescript_statement" id="Y}.+1V:nnZe,!V,GYkL:" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum ButtonOption {" line1="    F, FR, R, DR, D, DL, L, FL," line2="}" numlines="3"></mutation><next><block type="typescript_statement" id=")f[0.@H2|D$@fKsZEv.6" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum SliderOption {" line1="    S1, S2, S3," line2="}" numlines="3"></mutation><next><block type="typescript_statement" id=",j5Lrx:,^$n4m}=}Ve^y" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum LightOption {" line1="    Light1, Light2, Light3" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="Gms^OFn9Fuv%PA4Es*wW" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum LightState {" line1="    On, Off" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id=";hz2|%XI!)!EG}cuB]~V" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum ToggleOption {" line1="    Toggle1, Toggle2, Toggle3" line2="}" numlines="3"></mutation><next><block type="typescript_statement" id="oRL.*f,76]nO]B~B2R`q" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace microbitApp {" line1="" line2="    // define global variables" line3="    // let optionStrings: string[] = [&quot;BF&quot;, &quot;BR&quot;, &quot;BB&quot;, &quot;BL&quot;];" line4="    let optionStrings: string[] = [&quot;BF&quot;, &quot;BFR&quot;, &quot;BR&quot;, &quot;BBR&quot;, &quot;BB&quot;, &quot;BBL&quot;, &quot;BL&quot;, &quot;BFL&quot;]" line5="    let optionToggleStrings: string[] = [&quot;T1&quot;, &quot;T2&quot;, &quot;T3&quot;,]" line6="    let optionSliderStrings: string[] = [&quot;SX&quot;, &quot;SY&quot;, &quot;SZ&quot;,]" line7="    let stateToggleOne = 0;" line8="    let stateToggleTwo = 0;" line9="    let stateToggleThree = 0;" line10="    let stateLightOne = 0;" line11="    let stateLightTwo = 0;" line12="    let stateLightThree = 0;" line13="    let stateButtonDown = 0;" line14="    let sliderValX = 0;" line15="    let sliderValY = 0;" line16="    let sliderValZ = 0;" line17="    let rx1 = &quot;&quot;;" line18="    let rx2 = &quot;&quot;;" line19="" line20="    bluetooth.startUartService();" line21="" line22="    bluetooth.onUartDataReceived(serial.delimiters(Delimiters.Comma), function () {" line23="        let data = bluetooth.uartReadUntil(serial.delimiters(Delimiters.Comma));" line24="        let values = data.split(&quot;#&quot;);" line25="        if (values.length === 2) {" line26="            rx1 = values[0];" line27="            rx2 = values[1];" line28="" line29="            if (rx2 == &quot;D&quot;) {" line30="                stateButtonDown = 1;" line31="            } else if (rx2 == &quot;U&quot;) {" line32="                stateButtonDown = 0;" line33="            }" line34="" line35="            // Check if rx1 is &quot;SX&quot;, &quot;SY&quot;, or &quot;SZ&quot; and store rx2 value accordingly" line36="            if (rx1 == &quot;SX&quot;) {" line37="                sliderValX = parseInt(rx2);" line38="            } else if (rx1 == &quot;SY&quot;) {" line39="                sliderValY = parseInt(rx2);" line40="            } else if (rx1 == &quot;SZ&quot;) {" line41="                sliderValZ = parseInt(rx2);" line42="            } else if (rx1 === &quot;T1&quot;) {" line43="                stateToggleOne = parseInt(rx2);" line44="            } else if (rx1 === &quot;T2&quot;) {" line45="                stateToggleTwo = parseInt(rx2);" line46="            } else if (rx1 === &quot;T3&quot;) {" line47="                stateToggleThree = parseInt(rx2);" line48="            }" line49="" line50="            // Write values to the serial monitor for testing purpose" line51="            serial.writeLine(&quot;rx1: &quot; + rx1);" line52="            serial.writeLine(&quot;rx2: &quot; + rx2);" line53="        }" line54="    });" line55="" line56="" line57="    /**" line58="     * Custom block to handle different button options based on rx1 values." line59="     * @param option - The button option to match." line60="     * @param handler - The code to run when the option is matched." line61="     */" line62="    //% group=&quot;Buttons&quot;" line63="    //% block=&quot;When button %option is pressed down&quot;" line64="    export function onButtonOption(option: ButtonOption, handler: () =&gt; void): void {" line65="        basic.forever(function () {" line66="            if (rx1 == optionStrings[option] &amp;&amp; rx2 == &quot;D&quot;) {" line67="                handler();" line68="            }" line69="        });" line70="    }" line71="    //% group=&quot;Buttons&quot;" line72="    //% block=&quot;When button %option is released&quot;" line73="    export function onButtonUpOption(option: ButtonOption, handler: () =&gt; void): void {" line74="        basic.forever(function () {" line75="            if (rx1 == optionStrings[option] &amp;&amp; rx2 == &quot;U&quot;) {" line76="                handler();" line77="            }" line78="        });" line79="    }" line80="    //% group=&quot;Buttons&quot;" line81="    //% block=&quot;When any button is released&quot;" line82="    export function onButtonReleased(handler: () =&gt; void): void {" line83="        basic.forever(function () {" line84="            if (rx2 == &quot;U&quot;) {" line85="                handler();" line86="            }" line87="        });" line88="    }" line89="" line90="" line91="" line92="    /**" line93="     * Custom block to handle different toggle options based on rx1 values." line94="     * @param option - The toggle option to match." line95="     * @param handler - The code to run when the option is matched." line96="     */" line97="    //% group=&quot;Toggles&quot;" line98="    //% block=&quot;When toggle %option is switched on&quot;" line99="    export function onToggleOnOption(option: ToggleOption, handler: () =&gt; void): void {" line100="        basic.forever(function () {" line101="            if (rx1 == optionToggleStrings[option] &amp;&amp; rx2 == &quot;1&quot;) {" line102="                handler();" line103="            }" line104="        });" line105="    }" line106="" line107="    //% group=&quot;Toggles&quot;" line108="    //% block=&quot;When toggle %option is switched off&quot;" line109="    export function onToggleOffOption(option: ToggleOption, handler: () =&gt; void): void {" line110="        basic.forever(function () {" line111="            if (rx1 == optionToggleStrings[option] &amp;&amp; rx2 == &quot;0&quot;) {" line112="                handler();" line113="            }" line114="        });" line115="    }" line116="" line117="" line118="" line119="    /**" line120="     * Custom block to handle different slider options based on rx1 values." line121="     * @param option - The slider option to match." line122="     * @param handler - The code to run when the option is matched." line123="     */" line124="    //% group=&quot;Sliders&quot;" line125="    //% block=&quot;When slider %option is switched changed&quot;" line126="    export function onSliderOption(option: SliderOption, handler: () =&gt; void): void {" line127="        basic.forever(function () {" line128="            if (rx1 == optionSliderStrings[option]) {" line129="                handler();" line130="            }" line131="        });" line132="    }" line133="" line134="" line135="" line136="" line137="" line138="" line139="" line140="" line141="" line142="" line143="" line144="" line145="" line146="" line147="" line148="" line149="    /**" line150="     * Get Slider Values." line151="     */" line152="" line153="    //% group=&quot;Sliders&quot;" line154="    //% block=&quot;slider X value&quot;" line155="    export function getSliderX(): number {" line156="        return sliderValX;" line157="    }" line158="    //% group=&quot;Sliders&quot;" line159="    //% block=&quot;slider Y value&quot;" line160="    export function getSliderY(): number {" line161="        return sliderValY;" line162="    }" line163="    //% group=&quot;Sliders&quot;" line164="    //% block=&quot;slider Z value&quot;" line165="    export function getSliderZ(): number {" line166="        return sliderValZ;" line167="    }" line168="" line169="" line170="    /*" line171="    * @param light - The light to control." line172="    * @param state - The state of the light (On or Off)." line173="    */" line174="    //% group=&quot;Set Light Icon&quot;" line175="    //% block=&quot;Set $light $state&quot;" line176="    export function setLightState(light: LightOption, state: LightState): void {" line177="        let command = &quot;&quot;;" line178="        let stateVariable = 0;" line179="" line180="        switch (light) {" line181="            case LightOption.Light1:" line182="                command = &quot;L1&quot;;" line183="                stateVariable = stateLightOne;" line184="                break;" line185="            case LightOption.Light2:" line186="                command = &quot;L2&quot;;" line187="                stateVariable = stateLightTwo;" line188="                break;" line189="            case LightOption.Light3:" line190="                command = &quot;L3&quot;;" line191="                stateVariable = stateLightThree;" line192="                break;" line193="        }" line194="        if (state === LightState.On) {" line195="            command += &quot;#1&quot;;" line196="            stateVariable = 1;" line197="        } else {" line198="            command += &quot;#0&quot;;" line199="            stateVariable = 0;" line200="        }" line201="        bluetooth.uartWriteString(command);" line202="    }" line203="" line204="    /*" line205="     * Get the state of the specified toggle." line206="     * Returns the value of the toggle (0 for off, 1 for on)." line207="     * @param toggle - The toggle to check." line208="     * @returns The current state of the toggle (0 for off, 1 for on)." line209="     */" line210="    //% group=&quot;Toggle State&quot;" line211="    //% block=&quot;Get state of $toggle&quot;" line212="    export function getToggleState(toggle: ToggleOption): number {" line213="        let state = 0;" line214="" line215="        switch (toggle) {" line216="            case ToggleOption.Toggle1:" line217="                state = stateToggleOne;" line218="                break;" line219="            case ToggleOption.Toggle2:" line220="                state = stateToggleTwo;" line221="                break;" line222="            case ToggleOption.Toggle3:" line223="                state = stateToggleThree;" line224="                break;" line225="        }" line226="        return state;" line227="    }" line228="" line229="}" numlines="230"></mutation></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>